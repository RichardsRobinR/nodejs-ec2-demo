name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to the Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
        # run: docker login - u ${{secrets.DOCKER_USERNAME}} -P ${{secrets.DOCKER_PASSWORD}}


      - name: Build and Push docker image to registry
        uses: docker/build-push-action@v5
        with:
          # context: DockerFileFolder/
          push: true
          tags: richardsrobinr/ec2-demo-app:latest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "ap-south-1"

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.8.5
          cli_config_credentials_token: ${{ secrets.TF_TOKEN }}
          terraform_wrapper: false

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check
        continue-on-error: true

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -out "tfplan"
        continue-on-error: true

        # On push to "main", build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        # run: terraform apply -auto-approve -input=false
        run: terraform apply "tfplan"

      - name: Clean up 
        run: rm tfplan

      - name: Build & Deploy
        env:
            PRIVATE_KEY: ${{ secrets.SSH_KEY }}
            HOSTNAME: ${{secrets.SSH_HOST}}
            USER_NAME: ${{secrets.SSH_USER}}
      
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
          whoami
          sudo mkdir test
          sudo docker stop ec2-demo-app
          sudo docker images
          sudo docker run -d -p 8080:8080 --name ec2-demo-app richardsrobinr/ec2-demo-app:latest
          curl ${{ secrets.IP_V4 }}:8080
          sudo docker ps
          '

      # - name: executing remote ssh commands using ssh key
      #   uses: appleboy/ssh-action@v1.0.3
      #   with:
      #     host: ${{ secrets.SSH_HOST }}
      #     username: ${{ secrets.SSH_USER }}
      #     key: ${{ secrets.SSH_KEY }}
      #     port: ${{ secrets.SSH_PORT }}
      #     script: | 
      #       whoami
      #       sudo docker stop ec2-demo-app
      #       sudo docker images
      #       sudo docker run -d -p 8080:8080 --name ec2-demo-app richardsrobinr/ec2-demo-app:latest
      #       curl ${{ secrets.IP_V4 }}:8080
      #       sudo docker ps

      # - name: Add SSH key
      #   uses: webfactory/ssh-agent@v0.9.0
      #   with:
      #     ssh-private-key: ${{ secrets.SSH_KEY }}
      
    
      # - name: SSH into EC2 instance
      #   run: |
      #     ssh -o StrictHostKeyChecking=no ec2-13-127-83-128.ap-south-1.compute.amazonaws.com << 'EOF'
      #       echo "Hello from GitHub Actions!"
      #       # Add your commands here
      #     EOF
